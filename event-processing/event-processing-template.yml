AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "A template to create all the Event Processing infrastructure."

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production

Conditions:
  SetPermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  IsProductionOrStaging: !And
    - !Not [!Equals [ !Ref Environment, dev]]
    - !Not [!Equals [ !Ref Environment, build]]
  IsBuild: !Or
    - !Equals [ !Ref Environment, dev ]
    - !Equals [ !Ref Environment, build ]
  IsNotIntegrationOrBuild: !Or
    - !Not [!Equals [ !Ref Environment, dev ]]
    - !Not [!Equals [ !Ref Environment, build ]]
    - !Not [!Equals [ !Ref Environment, integration ]]

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - SetPermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Architectures:
      - x86_64

Resources:
  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource:
              - "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  LogKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LogKmsKey"
      TargetKeyId: !Ref LogsKmsKey

  SNSKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              AWS: "{{resolve:ssm:AuditAccountARN}}"
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  SNSKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/SNSKMSKey"
      TargetKeyId: !Ref SNSKMSKey

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'kms:Decrypt'
            Resource: '*'

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  epSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub
        - "EventProcessorSNSTopic-${EnvironmentName}"
        - EnvironmentName: !Ref Environment
      KmsMasterKeyId: !Ref SNSKMSKey

  SNSSubscribePolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSSubscribePolicy
        Version: 2012-10-17
        Statement:
          - Sid: SNSSubscribePolicy-1
            Effect: Allow
            Action:
              - 'sns:Subscribe'
            Principal:
              AWS:
                - "{{resolve:ssm:AuditAccountARN}}"
                - !Sub "${AWS::AccountId}"
            Resource: !Ref epSNSTopic
      Topics:
        - !Ref epSNSTopic

  SNSPublishPolicy:
    DependsOn:
      - epSNSTopic
      - KBVLambdaAccessRole
      - KBVAddressLambdaAccessRole
      - KBVFraudLambdaAccessRole
      - IPVLambdaAccessRole
      - IPVPassLambdaAccessRole
      - SPOTLambdaAccessRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref KBVLambdaAccessRole
        - !Ref KBVAddressLambdaAccessRole
        - !Ref KBVFraudLambdaAccessRole
        - !Ref IPVLambdaAccessRole
        - !Ref IPVPassLambdaAccessRole
        - !Ref SPOTLambdaAccessRole
      PolicyName: sns_publish_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
            Resource: !Ref epSNSTopic
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource: !GetAtt SNSKMSKey.Arn

  KBVEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      RetentionInDays: 7

  KBVEventProcessorFunction:
    DependsOn:
      - KBVEventProcessorLogGroup
      - KBVLambdaAccessRole
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "EventProcessorFunction-KBV"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  KBVEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV"

  KBVEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV"
      Namespace: "lambda/di/txma/errors"

  KBVEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV"

  KBVEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV"
      Namespace: "lambda/di/txma/errors"

  KBVLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBV"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVLambdaEventSourceMapping:
    DependsOn:
      - KBVEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsNotIntegrationOrBuild
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVQueueARN}}"
      FunctionName: !Ref KBVEventProcessorFunction

  KBVKMSPolicy:
    DependsOn:
      - KBVLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsNotIntegrationOrBuild
    Properties:
      Roles:
        - !Ref KBVLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvKmsArn}}"

  KBVAddressEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      RetentionInDays: 7

  KBVAddressEventProcessorFunction:
    DependsOn:
      - KBVAddressEventProcessorLogGroup
      - KBVAddressLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-KBVAddress"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVAddressLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  KBVAddressEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV Address"

  KBVAddressEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVAddressEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Address Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBVAddress"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV Address"
      Namespace: "lambda/di/txma/errors"

  KBVAddressEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVAddress"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV Address"

  KBVAddressEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVAddressEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBVAddress"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV Address"
      Namespace: "lambda/di/txma/errors"

  KBVAddressLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBVAddress"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVAddressLambdaEventSourceMapping:
    DependsOn:
      - KBVAddressEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsNotIntegrationOrBuild
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVAddressQueueARN}}"
      FunctionName: !Ref KBVAddressEventProcessorFunction

  KBVAddressKMSPolicy:
    DependsOn:
      - KBVAddressLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsNotIntegrationOrBuild
    Properties:
      Roles:
        - !Ref KBVAddressLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvAddressKmsArn}}"

  KBVFraudEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      RetentionInDays: 7

  KBVFraudEventProcessorFunction:
    DependsOn:
      - KBVFraudEventProcessorLogGroup
      - KBVFraudLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-KBVFraud"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt KBVFraudLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  KBVFraudEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields KBV Fraud"

  KBVFraudEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - KBVFraudEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Fraud Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-KBVFraud"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields KBV Fraud"
      Namespace: "lambda/di/txma/errors"

  KBVFraudEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-KBVFraud"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors KBV Fraud"

  KBVFraudEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - KBVFraudEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "KBV Fraud Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-KBVFraud"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors KBV Fraud"
      Namespace: "lambda/di/txma/errors"

  KBVFraudLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-KBVFraud"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  KBVFraudLambdaEventSourceMapping:
    DependsOn:
      - KBVFraudEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsNotIntegrationOrBuild
    Properties:
      EventSourceArn: "{{resolve:ssm:KBVFraudQueueARN}}"
      FunctionName: !Ref KBVFraudEventProcessorFunction

  KBVFraudKMSPolicy:
    DependsOn:
      - KBVFraudLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsNotIntegrationOrBuild
    Properties:
      Roles:
        - !Ref KBVFraudLambdaAccessRole
      PolicyName: kbv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:KbvFraudKmsArn}}"

  IPVEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      RetentionInDays: 7

  IPVEventProcessorFunction:
    DependsOn:
      - IPVEventProcessorLogGroup
      - IPVLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-IPV"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt IPVLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts


  IPVEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields IPV"

  IPVEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - IPVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-IPV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields IPV"
      Namespace: "lambda/di/txma/errors"

  IPVEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPV"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors IPV"

  IPVEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - IPVEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-IPV"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors IPV"
      Namespace: "lambda/di/txma/errors"

  IPVLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-IPV"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  IPVCoreLambdaEventSourceMapping:
    DependsOn:
      - IPVEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:IPVCoreQueueARN}}"
      FunctionName: !Ref IPVEventProcessorFunction

  IPVKMSPolicy:
    DependsOn:
      - IPVLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref IPVLambdaAccessRole
      PolicyName: ipv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:IPVCoreKmsArn}}"

  IPVPassEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      RetentionInDays: 7

  IPVPassEventProcessorFunction:
    DependsOn:
      - IPVPassEventProcessorLogGroup
      - IPVPassLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-IPVPass"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt IPVPassLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  IPVPassEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields IPV Pass"

  IPVPassEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - IPVEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Passport Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-IPVPass"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields IPV Pass"
      Namespace: "lambda/di/txma/errors"

  IPVPassEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-IPVPass"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors IPV Pass"

  IPVPassEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - IPVPassEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "IPV Passport Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-IPVPass"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors IPV Pass"
      Namespace: "lambda/di/txma/errors"

  IPVPassLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-IPVPass"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  IPVPassLambdaEventSourceMapping:
    DependsOn:
      - IPVPassEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:IPVPassportQueueARN}}"
      FunctionName: !Ref IPVPassEventProcessorFunction

  IPVPassKMSPolicy:
    DependsOn:
      - IPVPassLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref IPVPassLambdaAccessRole
      PolicyName: ipv_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              - "{{resolve:ssm:IPVPassportKmsArn}}"

  SPOTEventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      RetentionInDays: 7

  SPOTEventProcessorFunction:
    DependsOn:
      - SPOTEventProcessorLogGroup
      - SPOTLambdaAccessRole
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "EventProcessorFunction-SPOT"
      CodeUri: ../event-processing/event-processor
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt SPOTLambdaAccessRole.Arn
      Environment:
        Variables:
          topicArn: !Ref epSNSTopic
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  SPOTEventProcessorUnknownFieldsErrorMetric:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "WARN UNKNOWN FIELDS"
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Unknown Fields SPOT"

  SPOTEventProcessorUnknownFieldsAlarm:
    DependsOn:
      - SPOTEventProcessorUnknownFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "SPOT Event Processor Unknown Fields Alarm"
      AlarmName: "UnknownFieldsAlarm-SPOT"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Unknown Fields SPOT"
      Namespace: "lambda/di/txma/errors"

  SPOTEventProcessorRequiredFieldsErrorMetric:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR VALIDATION ERROR"
      LogGroupName: "/aws/lambda/EventProcessorFunction-SPOT"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "lambda/di/txma/errors"
          MetricName: "Validation Errors SPOT"

  SPOTEventProcessorRequiredFieldsAlarm:
    DependsOn:
      - SPOTEventProcessorRequiredFieldsErrorMetric
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "SPOT Event Processor Required Fields Alarm"
      AlarmName: "RequiredFieldsAlarm-SPOT"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 86400
      Threshold: 1
      MetricName: "Validation Errors SPOT"
      Namespace: "lambda/di/txma/errors"

  SPOTLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaAccessRole-SPOT"
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  SPOTLambdaEventSourceMapping:
    DependsOn:
      - SPOTEventProcessorFunction
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsProductionOrStaging
    Properties:
      EventSourceArn: "{{resolve:ssm:SPOTQueueArn}}"
      FunctionName: !Ref SPOTEventProcessorFunction

  SPOTKMSPolicy:
    DependsOn:
      - SPOTLambdaAccessRole
    Type: AWS::IAM::Policy
    Condition: IsProductionOrStaging
    Properties:
      Roles:
        - !Ref SPOTLambdaAccessRole
      PolicyName: spot_kms_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource: '{{resolve:ssm:SPOTKmsArn}}'

  FireHoseKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              Service: "sns.amazonaws.com"
            Action:
              - 'kms:GenerateDataKey*'
            Resource:
              - "*"
            Condition:
              ArnLike:
                "aws:PrincipalArn": "arn:aws:sns:*:${AWS::AccountId}:*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource:
              - "*"
            Condition:
              ForAnyValue:ArnEquals:
                "aws:PrincipalArn":
                  - !GetAtt ObfuscationFunction.Arn
#                  - !GetAtt ReIngestFunction.Arn

  FireHoseKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/FireHoseKMSKey"
      TargetKeyId: !Ref FireHoseKMSKey

  SplunkDeliveryBucketLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-splunk-bucket-logs"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  FraudS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FraudSplunkDeliveryFailureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${FraudSplunkDeliveryFailureBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  FraudSplunkDeliveryFailureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-fail"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/fraud-splunk-delivery-failure-bucket/"

  FraudTestS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsBuild
    Properties:
      Bucket: !Ref FraudSplunkDeliveryTestBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${FraudSplunkDeliveryTestBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  FraudSplunkDeliveryTestBucket:
    Type: AWS::S3::Bucket
    Condition: IsBuild
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-test"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/fraud-splunk-delivery-test-bucket/"

  CyberS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CyberSplunkDeliveryFailureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${CyberSplunkDeliveryFailureBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  CyberSplunkDeliveryFailureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-cyber-splunk-fail"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/cyber-splunk-delivery-failure-bucket/"

  CyberTestS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsBuild
    Properties:
      Bucket: !Ref CyberSplunkDeliveryTestBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${CyberSplunkDeliveryTestBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  CyberSplunkDeliveryTestBucket:
    Type: AWS::S3::Bucket
    Condition: IsBuild
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-cyber-splunk-test"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/cyber-splunk-delivery-test-bucket/"

  PerformanceS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PerformanceSplunkDeliveryFailureBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${PerformanceSplunkDeliveryFailureBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  PerformanceSplunkDeliveryFailureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-fail"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/performance-splunk-delivery-failure-bucket/"

  PerformanceTestS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsBuild
    Properties:
      Bucket: !Ref PerformanceSplunkDeliveryTestBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "EnableS3Logging"
            Effect: "Allow"
            Resource:
              - !Sub "${PerformanceSplunkDeliveryTestBucket.Arn}/*"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"

  PerformanceSplunkDeliveryTestBucket:
    Type: AWS::S3::Bucket
    Condition: IsBuild
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-test"
      VersioningConfiguration:
        Status: "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref SplunkDeliveryBucketLogsBucket
        LogFilePrefix: "event-processing/performance-splunk-delivery-test-bucket/"

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/firehose"
      RetentionInDays: 7

  FraudFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "fraud"

  CyberFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "cyber"

  PerformanceFirehoseLogStream:
    DependsOn:
      - FirehoseLogGroup
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "performance"

  FraudDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  FraudDeliveryStreamPolicy:
    DependsOn:
      - FraudDeliveryStreamRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref FraudDeliveryStreamRole
      PolicyName: fraud_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt FraudSplunkDeliveryFailureBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FraudSplunkDeliveryFailureBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'firehose:DescribeDeliveryStream'
              - 'firehose:ListDeliveryStreams'
              - 'firehose:ListTagsForDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt FraudDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${ObfuscationFunction.Arn}*"

  FraudDeliveryStreamTestPolicy:
    DependsOn:
      - FraudDeliveryStreamRole
    Type: AWS::IAM::Policy
    Condition: IsBuild
    Properties:
      Roles:
        - !Ref FraudDeliveryStreamRole
      PolicyName: fraud_firehose_delivery_test_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt FraudSplunkDeliveryTestBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FraudSplunkDeliveryTestBucket
                  - '*'

  CyberDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - 'firehose.amazonaws.com'
            Action: 'sts:AssumeRole'

  CyberDeliveryStreamPolicy:
    DependsOn:
      - CyberDeliveryStreamRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CyberDeliveryStreamRole
      PolicyName: cyber_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt CyberSplunkDeliveryFailureBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CyberSplunkDeliveryFailureBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'firehose:DescribeDeliveryStream'
              - 'firehose:ListDeliveryStreams'
              - 'firehose:ListTagsForDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt CyberDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${ObfuscationFunction.Arn}*"

  CyberDeliveryStreamTestPolicy:
    DependsOn:
      - CyberDeliveryStreamRole
    Type: AWS::IAM::Policy
    Condition: IsBuild
    Properties:
      Roles:
        - !Ref CyberDeliveryStreamRole
      PolicyName: cyber_firehose_delivery_test_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt CyberSplunkDeliveryTestBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CyberSplunkDeliveryTestBucket
                  - '*'

  PerformanceDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - 'firehose.amazonaws.com'
            Action: 'sts:AssumeRole'

  PerformanceStreamPolicy:
    DependsOn:
      - PerformanceDeliveryStreamRole
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref PerformanceDeliveryStreamRole
      PolicyName: performance_firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryFailureBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PerformanceSplunkDeliveryFailureBucket
                  - '*'
          - Effect: Allow
            Action:
              - 'firehose:DescribeDeliveryStream'
              - 'firehose:ListDeliveryStreams'
              - 'firehose:ListTagsForDeliveryStream'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
            Resource:
              - !GetAtt PerformanceDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration'
            Resource:
              - !Sub "${ObfuscationFunction.Arn}*"

  PerformanceDeliveryStreamTestPolicy:
    DependsOn:
      - PerformanceDeliveryStreamRole
    Type: AWS::IAM::Policy
    Condition: IsBuild
    Properties:
      Roles:
        - !Ref PerformanceDeliveryStreamRole
      PolicyName: performance_firehose_delivery_test_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt PerformanceSplunkDeliveryTestBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PerformanceSplunkDeliveryTestBucket
                  - '*'

  FireHoseSNSSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sns_kinesis_firehose_access_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:ListDeliveryStreams'
                  - 'firehose:ListTagsForDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Effect: Allow
                Resource:
                  - !GetAtt FraudDeliveryStream.Arn
                  - !GetAtt CyberDeliveryStream.Arn
                  - !GetAtt PerformanceDeliveryStream.Arn

  FraudDeliveryStream:
    DependsOn:
      - FraudDeliveryStreamRole
      - FraudFirehoseLogStream
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "FraudFireHose-${Environment}"
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      SplunkDestinationConfiguration:
        Fn::If:
          - IsProductionOrStaging
          -
            HECAcknowledgmentTimeoutInSeconds: 300
            HECEndpoint: "{{resolve:ssm:HECEndpoint}}"
            HECEndpointType: Raw
            HECToken: "{{resolve:ssm:HECToken}}"
            RetryOptions:
              DurationInSeconds: 7200
            S3BackupMode: "FailedEventsOnly"
            S3Configuration:
              BucketARN: !GetAtt FraudSplunkDeliveryFailureBucket.Arn
              BufferingHints:
                IntervalInSeconds: !If
                  - IsBuild
                  - 60
                  - 900
                SizeInMBs: 128
              CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
                LogStreamName: !Ref FraudFirehoseLogStream
              CompressionFormat: GZIP
              ErrorOutputPrefix: "FraudDeliveryErrors"
              RoleARN: !GetAtt FraudDeliveryStreamRole.Arn
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt ObfuscationFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt FraudDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"
      ExtendedS3DestinationConfiguration:
        Fn::If:
          - IsBuild
          -
            Prefix: "firehose/"
            BucketARN: !GetAtt FraudSplunkDeliveryTestBucket.Arn
            BufferingHints:
              IntervalInSeconds: !If
                - IsBuild
                - 60
                - 900
              SizeInMBs: 128
            CompressionFormat: "GZIP"
            RoleARN: !GetAtt FraudDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"

  CyberDeliveryStream:
    DependsOn:
      - CyberDeliveryStreamRole
      - CyberFirehoseLogStream
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "CyberFireHose-${Environment}"
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      SplunkDestinationConfiguration:
        Fn::If:
          - IsProductionOrStaging
          -
            HECAcknowledgmentTimeoutInSeconds: 300
            HECEndpoint: "{{resolve:ssm:HECEndpoint}}"
            HECEndpointType: Raw
            HECToken: "{{resolve:ssm:HECToken}}"
            RetryOptions:
              DurationInSeconds: 7200
            S3BackupMode: "FailedEventsOnly"
            S3Configuration:
              BucketARN: !GetAtt CyberSplunkDeliveryFailureBucket.Arn
              BufferingHints:
                IntervalInSeconds: !If
                  - IsBuild
                  - 60
                  - 900
                SizeInMBs: 128
              CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
                LogStreamName: !Ref CyberFirehoseLogStream
              CompressionFormat: GZIP
              ErrorOutputPrefix: "CyberDeliveryErrors"
              RoleARN: !GetAtt CyberDeliveryStreamRole.Arn
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt ObfuscationFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt CyberDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"
      ExtendedS3DestinationConfiguration:
        Fn::If:
          - IsBuild
          -
            Prefix: "firehose/"
            BucketARN: !GetAtt CyberSplunkDeliveryTestBucket.Arn
            BufferingHints:
              IntervalInSeconds: !If
                - IsBuild
                - 60
                - 900
              SizeInMBs: 128
            CompressionFormat: "GZIP"
            RoleARN: !GetAtt CyberDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"

  PerformanceDeliveryStream:
    DependsOn:
      - PerformanceDeliveryStreamRole
      - PerformanceFirehoseLogStream
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "PerformanceFireHose-${Environment}"
      DeliveryStreamType: DirectPut
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt FireHoseKMSKey.Arn
        KeyType: "CUSTOMER_MANAGED_CMK"
      SplunkDestinationConfiguration:
        Fn::If:
          - IsProductionOrStaging
          -
            HECAcknowledgmentTimeoutInSeconds: 300
            HECEndpoint: "{{resolve:ssm:HECEndpoint}}"
            HECEndpointType: Raw
            HECToken: "{{resolve:ssm:HECToken}}"
            RetryOptions:
              DurationInSeconds: 7200
            S3BackupMode: "FailedEventsOnly"
            S3Configuration:
              BucketARN: !GetAtt PerformanceSplunkDeliveryFailureBucket.Arn
              BufferingHints:
                IntervalInSeconds: !If
                  - IsBuild
                  - 60
                  - 900
                SizeInMBs: 128
              CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Ref FirehoseLogGroup
                LogStreamName: !Ref PerformanceFirehoseLogStream
              CompressionFormat: GZIP
              ErrorOutputPrefix: "PerformanceDeliveryErrors"
              RoleARN: !GetAtt PerformanceDeliveryStreamRole.Arn
            ProcessingConfiguration:
              Enabled: true
              Processors:
                - Type: Lambda
                  Parameters:
                    - ParameterName: LambdaArn
                      ParameterValue: !GetAtt ObfuscationFunction.Arn
                    - ParameterName: RoleArn
                      ParameterValue: !GetAtt PerformanceDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"
      ExtendedS3DestinationConfiguration:
        Fn::If:
          - IsBuild
          -
            Prefix: "firehose/"
            BucketARN: !GetAtt PerformanceSplunkDeliveryTestBucket.Arn
            BufferingHints:
              IntervalInSeconds: !If
                - IsBuild
                - 60
                - 900
              SizeInMBs: 128
            CompressionFormat: "GZIP"
            RoleARN: !GetAtt PerformanceDeliveryStreamRole.Arn
          - !Ref "AWS::NoValue"

  FraudDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref epSNSTopic
      Endpoint: !GetAtt FraudDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt FireHoseSNSSubscriptionRole.Arn
  #      FilterPolicy:
  #        event_name:
  #          - somevalue

  CyberDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref epSNSTopic
      Endpoint: !GetAtt CyberDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt FireHoseSNSSubscriptionRole.Arn
  #      FilterPolicy:
  #        event_name:
  #          - somevalue

  PerformanceDeliveryStreamSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref epSNSTopic
      Endpoint: !GetAtt PerformanceDeliveryStream.Arn #FireHose
      Protocol: firehose
      RawMessageDelivery: true
      SubscriptionRoleArn: !GetAtt FireHoseSNSSubscriptionRole.Arn
  #      FilterPolicy:
  #        event_name:
  #          - somevalue

  ObfuscationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - SetPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"

  ObfuscationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: "/aws/lambda/ObfuscationFunction"
      RetentionInDays: 7

  ObfuscationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "ObfuscationFunction"
      CodeUri: ../event-processing/obfuscation
      PackageType: Zip
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      Role: !GetAtt ObfuscationFunctionRole.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

#  ReIngestLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      KmsKeyId: !GetAtt LogsKmsKey.Arn
#      LogGroupName: "/aws/lambda/ReIngest"
#      RetentionInDays: 7

#  ReIngestFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: "Re-IngestFunction"
#      CodeUri: ../event-processing/re-ingest
#      PackageType: Zip
#      Handler: app.handler
#      Runtime: nodejs14.x
#      Timeout: 30
#      Events:
#        FraudBucket:
#          Type: S3
#          Properties:
#            Bucket: !Ref FraudSplunkDeliveryFailureBucket
#            Events: 's3:ObjectCreated:*'
#        CyberBucket:
#          Type: S3
#          Properties:
#            Bucket: !Ref CyberSplunkDeliveryFailureBucket
#            Events: 's3:ObjectCreated:*'
#        PerformanceBucket:
#          Type: S3
#          Properties:
#            Bucket: !Ref PerformanceSplunkDeliveryFailureBucket
#            Events: 's3:ObjectCreated:*'
#      Policies:
#        - S3ReadPolicy:
#            BucketName: !Sub "${AWS::StackName}-${Environment}-fraud-splunk-fail"
#        - S3ReadPolicy:
#            BucketName: !Sub "${AWS::StackName}-${Environment}-cyber-splunk-fail"
#        - S3ReadPolicy:
#            BucketName: !Sub "${AWS::StackName}-${Environment}-perf-splunk-fail"
##        - FirehoseWritePolicy:
##            DeliveryStreamName: !Ref FraudDeliveryStream
##        - FirehoseWritePolicy:
##            DeliveryStreamName: !Ref CyberDeliveryStream
##        - FirehoseWritePolicy:
##            DeliveryStreamName: !Ref PerformanceDeliveryStream
#    Metadata: # Manage esbuild properties
#      BuildMethod: esbuild
#      BuildProperties:
#        Minify: true
#        Target: "es2020"
#        Sourcemap: true
#        EntryPoints:
#          - app.ts
